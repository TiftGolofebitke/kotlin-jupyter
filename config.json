{
  "repositories": [
    "https://jcenter.bintray.com/",
    "https://repo.maven.apache.org/maven2/",
    "https://jitpack.io"
  ],
  "libraries": [
    {
      "name": "klaxon(v=5.2)",
      "artifacts": [
        "com.beust:klaxon:$v"
      ],
      "imports": [
        "com.beust.klaxon.*"
      ],
      "link": "https://github.com/cbeust/klaxon"
    },
    {
      "name": "lets-plot",
      "repositories": [
        "https://jetbrains.bintray.com/lets-plot-maven"
      ],
      "artifacts": [
        "org.jetbrains.lets-plot:lets-plot-common:1.0.0-SNAPSHOT",
        "org.jetbrains.lets-plot:lets-plot-kotlin-api:0.0.4-SNAPSHOT",
        "org.jetbrains.lets-plot:kotlin-frontend-api:0.0.4-SNAPSHOT",
        "org.jetbrains.lets-plot:lets-plot-jfx:1.0.0-SNAPSHOT"
      ],
      "imports": [
        "jetbrains.letsPlot.*",
        "jetbrains.letsPlot.geom.*",
        "jetbrains.letsPlot.stat.*"
      ],
      "init": [
        "fun jetbrains.letsPlot.intern.Plot.display() = DISPLAY(HTML(jetbrains.letsPlot.intern.frontendContext.FrontendContextUtil.getHtml(this)))",
        "DISPLAY(HTML(jetbrains.datalore.jupyter.configureScript()))"
      ],
      "renderers": [
        {
          "class": "jetbrains.letsPlot.intern.Plot",
          "display": "$it.display()",
          "result": ""
        }
      ]
    },
    {
      "name": "krangl",
      "artifacts": [
        "com.github.holgerbrandl:krangl:-SNAPSHOT"
      ],
      "imports": [
        "krangl.*"
      ],
      "init": [
        "fun krangl.DataFrame.display() : jupyter.kotlin.DisplayResult\n{val sb = StringBuilder()\nsb.append(\"<table><tr>\")\ncols.forEach { sb.append(\"<th>${it.name}</th>\") }\nsb.append(\"</tr>\")\nrows.forEach {\n    sb.append(\"<tr>\")\n    it.values.forEach { sb.append(\"<td>${it}</td>\") }\n    sb.append(\"</tr>\")\n}\nsb.append(\"</table>\")\nreturn DISPLAY(HTML(sb.toString()))}"
      ],
      "renderers": [
        {
          "class": "krangl.SimpleDataFrame",
          "display": "$it.display()",
          "result": ""
        },
        {
          "class": "krangl.GroupedDataFrame",
          "display": "$it.display()",
          "result": ""
        }
      ],
      "link": "https://github.com/holgerbrandl/krangl"
    },
    {
      "name": "kotlin-statistics",
      "artifacts": [
        "com.github.thomasnield:kotlin-statistics:-SNAPSHOT"
      ],
      "imports": [
        "org.nield.kotlinstatistics.*"
      ],
      "link": "https://github.com/thomasnield/kotlin-statistics"
    },
    {
      "name": "kravis",
      "artifacts": [
        "com.github.holgerbrandl:kravis:-SNAPSHOT"
      ],
      "imports": [
        "kravis.*"
      ],
      "renderers": [
        {
          "class": "kravis.GGPlot",
          "display": "DISPLAY($it.show())",
          "result": ""
        }
      ],
      "link": "https://github.com/holgerbrandl/kravis"
    },
    {
      "name": "spark(scala=2.11.12,spark=2.4.4)",
      "artifacts": [
        "org.apache.spark:spark-mllib_2.11:$spark",
        "org.apache.spark:spark-sql_2.11:$spark",
        "org.apache.spark:spark-repl_2.11:$spark",
        "org.apache.spark:spark-streaming-flume-assembly_2.11:$spark",
        "org.apache.spark:spark-graphx_2.11:$spark",
        "org.apache.spark:spark-launcher_2.11:$spark",
        "org.apache.spark:spark-catalyst_2.11:$spark",
        "org.apache.spark:spark-streaming_2.11:$spark",
        "org.apache.spark:spark-core_2.11:$spark",
        "org.scala-lang:scala-library:$scala",
        "org.scala-lang:scala-reflect:$scala",
        "org.scala-lang:scala-compiler:$scala",
        "org.scala-lang.modules:scala-xml_2.11:1.2.0",
        "commons-io:commons-io:2.5"
      ],
      "imports": [
        "org.apache.spark.sql.*",
        "org.apache.spark.api.java.*",
        "org.apache.spark.ml.feature.*",
        "org.apache.spark.sql.functions.*"
      ],
      "init": [
        "org.apache.log4j.Logger.getLogger(\"org\").setLevel(org.apache.log4j.Level.OFF)",
        "org.apache.log4j.Logger.getLogger(\"akka\").setLevel(org.apache.log4j.Level.OFF)",
        "val spark = SparkSession\n        .builder()\n        .appName(\"Spark example\")\n        .master(\"local\")\n        .getOrCreate()",
        "val sc = spark.sparkContext()",
        "%dumpClassesForSpark",
        "fun Dataset<Row>.toHTML(limit: Int = 20, truncate: Int = 50): String {\n    val sb = StringBuilder()\n\n    sb.append(\"<html><body>\")\n    sb.append(\"\"\"<table><tr>\"\"\")\n    sb.append(schema().fieldNames().map { \"<th style=\\\"text-align:left\\\">${it}</th>\"}.joinToString(\"\"))\n    sb.append(\"</tr>\")\n\n    limit(limit).collectAsList().forEach { row ->\n        sb.append(\"<tr>\")\n        (0 until row.size()).map {\n            row[it].toString()\n        }.forEach {\n            val truncated = if (truncate > 0 && it.length > truncate) {\n                if (truncate < 4) it.substring(0, truncate)\n                else it.substring(0, truncate - 3) + \"...\"\n            } else {\n                it\n            }\n            sb.append(\"\"\"<td style=\"text-align:left\" title=\"$it\">$truncated</td>\"\"\")\n        }\n        sb.append(\"</tr>\")\n    }\n    sb.append(\"</table>\")\n    if(limit < count())\n        sb.append(\"<p>... only showing top $limit rows</p>\")\n    sb.append(\"</body></html>\")\n    return sb.toString()\n}"
      ],
      "initCell": [
        "scala.Console.setOut(System.out)",
        "scala.Console.setErr(System.err)"
      ],
      "renderers": [
        {
          "class": "org.apache.spark.sql.Dataset",
          "result": "HTML($it.toHTML())"
        }
      ]
    },
    {
      "name": "gral",
      "link": "https://github.com/eseifert/gral",
      "artifacts": [
        "de.erichseifert.gral:gral-core:0.11"
      ],
      "imports": [
        "de.erichseifert.gral.data.*",
        "de.erichseifert.gral.data.filters.*",
        "de.erichseifert.gral.graphics.*",
        "de.erichseifert.gral.plots.*",
        "de.erichseifert.gral.plots.lines.*",
        "de.erichseifert.gral.plots.points.*",
        "de.erichseifert.gral.util.*"
      ],
      "init": [
        "fun<T: Drawable> T.show(sizeX: Double, sizeY: Double): Any {\n    val writer = de.erichseifert.gral.io.plots.DrawableWriterFactory.getInstance().get(\"image/svg+xml\")\n\n    val buf = java.io.ByteArrayOutputStream()\n\n    writer.write(this, buf, sizeX, sizeY)\n\n    return MIME(writer.mimeType to buf.toString())\n}"
      ]
    }
  ]
}
